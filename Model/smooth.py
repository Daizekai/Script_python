def N_point_smooth(F,N=5,flag = 0):    #空间平滑，这里先写五点平滑
    """空间平滑：用来滤去短波，抑制非线性不稳定。
    Args:
        F (numpy.array): 第n时间层
        N (int, optional): N点平滑，默认为5
        flag(int) :0为只做正平滑
    Returns:
        F_new(numpy.array):平滑后的数组
    """
    F_new = F.copy()
    if N == 5:    
        S = 0.5
        F[1:-1,1:-1] = F[1:-1,1:-1] + S/4.0*(F[2:,1:-1]+F[:-2,1:-1]+F[1:-1,2:]+F[1:-1,:-2]-4*F[1:-1,1:-1])
        if flag == 1: #做正逆平滑
            S = - 0.5
            F_new[1:-1,1:-1] = F[1:-1,1:-1] + S/4.0*(F[2:,1:-1]+F[:-2,1:-1]+F[1:-1,2:]+F[1:-1,:-2]-4*F[1:-1,1:-1])
        else :
            F_new = F

    elif  N==9: #内边界平滑
        S = 0.5 
        F_new[[1,-2],1:-1] = F[[1,-2],1:-1] + S/2*(1-S)*(F[[1,-2],2:] + F[[2,-1],1:-1] + F[[1,-2],0:-2] + F[[0,-3],1:-1] \
                                - 4*F[[1,-2],1:-1]) + S**2/2*(F[[2,-1],2:]+F[[2,-1],0:-2]+F[[0,-3],0:-2]+F[[0,-3],2:]-4*F[[1,-2],1:-1])
        
        F_new[2:-2,[1,-2]] = F[2:-2,[1,-2]] + S/2*(1-S)*(F[2:-2,[2,-1]] + F[3:-1,[1,-2]] + F[2:-2,[0,-1]] + F[1:-3,[1,-2]] \
                                -4*F[2:-2,[1,-2]]) + S**2/2*(F[3:-1,[2,-1]]+F[3:-1,[0,-1]]+F[1:-3,[0,-3]]+F[1:-3,[2,-1]]-4*F[2:-2,[1,-2]])
    return F_new

def time_smooth(F,flag = 0):    #时间平滑
    """时间平滑(3时间层)：用来阻尼高频振荡，抑制解的增长

    Args:
        F (3*n*m,):第一维为三个时间层，第二维度为纬度，第三为经度. 即：(t,y,x)
        flag(int) :0为只做正平滑

    Returns:
        F_new(numpy.array):平滑后的数组
    """
    S = 0.5
    F[1,1:-1,1:-1] = (1-S)*F[1,1:-1,1:-1] + S/2*( F[2,1:-1,1:-1] + F[0,1:-1,1:-1] )

    if flag != 1:
        return F[1,1:-1,1:-1]
    S = -0.5
    return (1-S)*F[1,1:-1,1:-1] + S/2*( F[2,1:-1,1:-1] + F[0,1:-1,1:-1] )

