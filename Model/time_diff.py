
from Model.space_diff import advection_equation_2

def Eula_past_diff(u,v,h,map,f,dx,dy,dt):  #欧拉前差
    """_summary_

    Args:
        u (_type_): _description_
        v (_type_): _description_
        h (_type_): _description_
        map (_type_): _description_
        f (_type_): _description_
        dx (_type_): _description_
        dy (_type_): _description_
        dt (_type_): _description_

    Returns:
        _type_: _description_
    """

    E,G,H = advection_equation_2(map,f,dx,dy,u[1,...],v[1,...],h[1,...])# n时刻,注意(m-2)*(n-2)
    ######################u场更新 u[0,1:-1,1:-1] 作为中转层################
    u[0,1:-1,1:-1] = u[1,1:-1,1:-1] + dt * E 
    v[0,1:-1,1:-1] = v[1,1:-1,1:-1] + dt * G 
    h[0,1:-1,1:-1] = h[1,1:-1,1:-1] + dt * H 
    #######################################################################
    E,G,H = advection_equation_2(map,f,dx,dy,u[0,...],v[0,...],h[0,...])
    #######################################################################
    u[-1,1:-1,1:-1] = u[1,1:-1,1:-1] + dt * E
    ###################### v场更新##########################################
    v[-1,1:-1,1:-1] = v[1,1:-1,1:-1] + dt * G
    ###################### h场更新##########################################
    h[-1,1:-1,1:-1] = h[1,1:-1,1:-1] + dt * H 
    ########################################################################
    u[1,...]= u[-1,...]
    v[1,...]= v[-1,...]
    h[1,...]= h[-1,...]
    
    return u,v,h
    
def Central_diff(u,v,h,map,f,dx,dy,dt):    # 时间中央差分
    """时间中央差

    Args:
        u (_type_): _description_
        v (_type_): _description_
        h (_type_): _description_
        map (_type_): _description_
        f (_type_): _description_
        dx (_type_): _description_
        dy (_type_): _description_
        dt (_type_): _description_

    Returns:
        _type_: _description_
    """

    ########################################################################
    E,G,H = advection_equation_2(map,f,dx,dy,u[1,...],v[1,...],h[1,...])
    ########################################################################
    u[-1,1:-1,1:-1] = u[0,1:-1,1:-1] + 2.* dt * E
    v[-1,1:-1,1:-1] = v[0,1:-1,1:-1] + 2.* dt * G
    h[-1,1:-1,1:-1] = h[0,1:-1,1:-1] + 2.* dt * H   
    ########################################################################
    u[:-1,...]= u[1:,...]
    v[:-1,...]= v[1:,...]
    h[:-1,...]= h[1:,...]
    ########################################################################
    return u,v,h 

def three_step(u,v,h,map,f,dx,dy,dt):   # 三步法起步预报
    """_summary_

    Args:
        u (_type_): _description_
        v (_type_): _description_
        h (_type_): _description_
        map (_type_): _description_
        f (_type_): _description_
        dx (_type_): _description_
        dy (_type_): _description_
        dt (_type_): _description_

    Returns:
        _type_: _description_
    """
    
    ##########半步前差#######################################################
    # 得到边界
    u_1_2 = u[1,...].copy()
    v_1_2 = v[1,...].copy()
    h_1_2 = h[1,...].copy()
    ########################################################################
    E,G,H = advection_equation_2(map,f,dx,dy,u[1,...],v[1,...],h[1,...])# 注意(m-2)*(n-2)
    ########################################################################
    u_1_2[1:-1,1:-1] = u[1,1:-1,1:-1] +  dt * E /2.0
    v_1_2[1:-1,1:-1] = v[1,1:-1,1:-1] +  dt * G /2.0
    h_1_2[1:-1,1:-1] = h[1,1:-1,1:-1] +  dt * H /2.0
    ##########半步中央差######################################################
    u_1 = u[1,...].copy()
    v_1 = v[1,...].copy()
    h_1 = h[1,...].copy()
    ########################################################################
    E,G,H = advection_equation_2(map,f,dx,dy,u_1_2,v_1_2,h_1_2)
    ########################################################################
    u_1[1:-1,1:-1] = u[1,1:-1,1:-1] +  dt * E
    v_1[1:-1,1:-1] = v[1,1:-1,1:-1] +  dt * G
    h_1[1:-1,1:-1] = h[1,1:-1,1:-1] +  dt * H
    ############ 存数据######################################################
    u[0,1:-1,1:-1] = u_1[1:-1,1:-1] 
    v[0,1:-1,1:-1] = v_1[1:-1,1:-1]  
    h[0,1:-1,1:-1] = h_1[1:-1,1:-1]  

    #############中央差分#####################################################
    E,G,H = advection_equation_2(map,f,dx,dy,u_1 ,v_1 ,h_1)
    u[-1,1:-1,1:-1] = u[1,1:-1,1:-1] +  dt * E * 2.0
    v[-1,1:-1,1:-1] = v[1,1:-1,1:-1] +  dt * G * 2.0
    h[-1,1:-1,1:-1] = h[1,1:-1,1:-1] +  dt * H * 2.0
    ########################################################################
    u[1,...]= u[-1,...]
    v[1,...]= v[-1,...]
    h[1,...]= h[-1,...]
    ########################################################################
    return u,v,h